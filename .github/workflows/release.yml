name: Release & Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  DEVELOPER_DIR: /Applications/Xcode_16.4.app/Contents/Developer
  IOS_SIMULATOR_DEVICE: "iPhone 16"
  IOS_SIMULATOR_OS: "26.0"

jobs:
  # Job 1: Create Release
  create-release:
    name: Create Release
    runs-on: macos-14
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        id: release-notes
        run: |
          echo "Generating release notes..."
          VERSION="${{ steps.version.outputs.version }}"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## üöÄ Release $VERSION
          
          ### üìã Changes
          $COMMITS
          
          ### üèóÔ∏è Architecture
          - Clean Architecture with Swift Packages
          - SwiftUI + UIKit hybrid implementation
          - Comprehensive testing suite
          - Dependency injection with DIContainer
          
          ### üß™ Testing
          - Unit tests for all business logic
          - UI tests for user interactions
          - Integration tests for data flow
          - Performance and launch time testing
          
          ### üì± Features
          - Character listing with pagination
          - Status-based filtering
          - Character details view
          - Cross-platform UI support
          - Offline-first architecture
          
          ### üîß Technical Details
          - iOS 17.0+ support
          - Swift 5.9+
          - SwiftUI with async/await
          - Modular package architecture
          EOF
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: RickMorty ${{ steps.version.outputs.version }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}

  # Job 2: Build Release
  build-release:
    name: Build Release
    runs-on: macos-14
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: Build Release
        run: |
          xcodebuild build \
            -workspace RickMorty.xcworkspace \
            -scheme RickMorty \
            -destination "generic/platform=iOS" \
            -configuration Release \
            CODE_SIGNING_ALLOWED=NO \
            -archivePath RickMorty.xcarchive

      - name: Archive App
        run: |
          xcodebuild archive \
            -workspace RickMorty.xcworkspace \
            -scheme RickMorty \
            -destination "generic/platform=iOS" \
            -configuration Release \
            -archivePath RickMorty.xcarchive \
            CODE_SIGNING_ALLOWED=NO

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath RickMorty.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist exportOptions.plist \
            CODE_SIGNING_ALLOWED=NO

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rickmorty-${{ needs.create-release.outputs.version }}-build
          path: |
            RickMorty.xcarchive
            ./build/*.ipa
          retention-days: 30

  # Job 3: Run Full Test Suite
  test-release:
    name: Test Release Build
    runs-on: macos-14
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Run All Tests
        run: |
          # Unit Tests
          xcodebuild test \
            -workspace RickMorty.xcworkspace \
            -scheme RickMorty \
            -destination "platform=iOS Simulator,name=iPhone 16,OS=26.0" \
            -configuration Release \
            -only-testing:RickMortyTests \
            CODE_SIGNING_ALLOWED=NO
          
          # UI Tests
          xcodebuild test \
            -workspace RickMorty.xcworkspace \
            -scheme RickMorty \
            -destination "platform=iOS Simulator,name=iPhone 16,OS=26.0" \
            -configuration Release \
            -only-testing:RickMortyUITests \
            CODE_SIGNING_ALLOWED=NO
          
          # Package Tests
          for package in UseCase DependencyContainer CoreAPI RickMortyNetworkLayer RickMortyRepository; do
            echo "Testing $package package..."
            cd $package && swift test && cd ..
          done

  # Job 4: Security Scan
  security-scan:
    name: Security Scan
    runs-on: macos-14
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Security Scan
        run: |
          echo "üîç Running security scan for release ${{ needs.create-release.outputs.version }}"
          
          # Check for hardcoded secrets
          echo "Checking for potential secrets..."
          if grep -r -i "password\|secret\|key\|token" --include="*.swift" --exclude-dir=".build" . | grep -v "//.*password\|//.*secret"; then
            echo "‚ö†Ô∏è  Found potential secrets in code"
          else
            echo "‚úÖ No obvious secrets found"
          fi
          
          # Check for insecure practices
          echo "Checking for insecure practices..."
          if grep -r "http://" --include="*.swift" .; then
            echo "‚ö†Ô∏è  Found HTTP URLs (should use HTTPS)"
          else
            echo "‚úÖ No HTTP URLs found"
          fi

  # Job 5: Performance Benchmark
  performance-benchmark:
    name: Performance Benchmark
    runs-on: macos-14
    needs: build-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Run Performance Tests
        run: |
          echo "üöÄ Running performance benchmarks..."
          
          # Launch time test
          xcodebuild test \
            -workspace RickMorty.xcworkspace \
            -scheme RickMorty \
            -destination "platform=iOS Simulator,name=iPhone 16,OS=26.0" \
            -configuration Release \
            -only-testing:RickMortyUITests/testLaunchPerformance \
            CODE_SIGNING_ALLOWED=NO
          
          # Memory usage analysis
          echo "üìä Analyzing memory usage..."
          # This would typically involve Instruments or other profiling tools

  # Job 6: Update Release with Results
  update-release:
    name: Update Release
    runs-on: macos-14
    needs: [create-release, build-release, test-release, security-scan, performance-benchmark]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Release Status
        run: |
          echo "üìã Release ${{ needs.create-release.outputs.version }} Status:"
          echo "‚úÖ Release created"
          echo "‚úÖ Build completed"
          echo "‚úÖ Tests passed"
          echo "‚úÖ Security scan completed"
          echo "‚úÖ Performance benchmark completed"
          echo ""
          echo "üéâ Release ${{ needs.create-release.outputs.version }} is ready!"
