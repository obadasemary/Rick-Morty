name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  IOS_SIMULATOR_OS: "18.6"
  IOS_SIMULATOR_NAME: "iPhone 16"
  SCHEME: "RickMorty"
  WORKSPACE: "RickMorty.xcworkspace"
  DESTINATION: "platform=iOS Simulator,name=iPhone 16,OS=18.6"

jobs:
  # Pre-release validation
  pre-release-validation:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          echo "Validating version: $VERSION"
          
          # Check version format
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format. Expected: v1.0.0"
            exit 1
          fi
          
          echo "‚úÖ Version format is valid"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Run full test suite
        run: |
          set -euo pipefail
          echo "::group::Running Pre-Release Tests"
          
          # Test all packages
          for package_dir in */; do
            if [ -f "${package_dir}Package.swift" ] && [[ "$package_dir" != "FeedListView/" ]]; then
              echo "Testing $package_dir"
              (cd "$package_dir" && swift test)
            fi
          done
          
          # Test main app
          xcodebuild test \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -skipMacroValidation
          
          echo "‚úÖ All tests passed"
          echo "::endgroup::"

  # Build release artifacts
  build-release:
    runs-on: macos-latest
    needs: pre-release-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build release version
        run: |
          set -euo pipefail
          echo "::group::Building Release Version"
          
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -configuration Release \
            -skipMacroValidation \
            build
          
          echo "‚úÖ Release build completed"
          echo "::endgroup::"

      - name: Archive app
        run: |
          set -euo pipefail
          echo "::group::Creating Archive"
          
          xcodebuild archive \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -destination "generic/platform=iOS" \
            -archivePath "build/RickMorty.xcarchive" \
            -skipMacroValidation
          
          echo "‚úÖ Archive created"
          echo "::endgroup::"

      - name: Export IPA
        run: |
          set -euo pipefail
          echo "::group::Exporting IPA"
          
          xcodebuild -exportArchive \
            -archivePath "build/RickMorty.xcarchive" \
            -exportPath "build/export" \
            -exportOptionsPlist "exportOptions.plist"
          
          echo "‚úÖ IPA exported"
          echo "::endgroup::"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ env.VERSION }}
          path: |
            build/RickMorty.xcarchive
            build/export/*.ipa
          retention-days: 30

  # Create GitHub release
  create-release:
    runs-on: macos-latest
    needs: [pre-release-validation, build-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ env.VERSION }}
          path: build/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            ## üöÄ RickMorty App Release ${{ env.VERSION }}
            
            ### üì± What's New
            - Comprehensive unit tests for RickMortyRepository
            - macOS 14.0 support with @Observable framework
            - Enhanced CI/CD pipeline
            - Improved error handling and test coverage
            
            ### üß™ Test Coverage
            - ‚úÖ RickMortyRepository: 13 unit tests
            - ‚úÖ UseCase: Comprehensive business logic tests
            - ‚úÖ DependencyContainer: DI pattern tests
            - ‚úÖ CoreAPI: Endpoint and data model tests
            - ‚úÖ RickMortyNetworkLayer: Network service tests
            - ‚úÖ FeedView: ViewModel and UI tests
            
            ### üì¶ Architecture
            - Clean Architecture with Swift Packages
            - Dependency Injection with DIContainer
            - Swift Concurrency (async/await)
            - @Observable framework for state management
            
            ### üîß Technical Details
            - **Platform Support:** iOS 17.0+, macOS 14.0+
            - **Swift Version:** 6.1+
            - **Xcode Version:** 16.4+
            - **Dependencies:** Swift Package Manager
            
            ### üìã Installation
            1. Download the IPA file from the assets below
            2. Install via Xcode or TestFlight
            3. Ensure iOS 17.0+ for optimal experience
            
            ### üêõ Bug Reports
            Please report any issues in the [Issues](https://github.com/obadasemary/Rick-Morty/issues) section.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/export/RickMorty.ipa
          asset_name: RickMorty-${{ env.VERSION }}.ipa
          asset_content_type: application/octet-stream

  # Post-release tasks
  post-release:
    runs-on: macos-latest
    needs: [pre-release-validation, build-release, create-release]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "::group::Release Summary"
          echo "üéâ Release ${{ env.VERSION }} completed successfully!"
          echo ""
          echo "üìä Release Statistics:"
          echo "‚úÖ Pre-release validation: ${{ needs.pre-release-validation.result }}"
          echo "‚úÖ Build process: ${{ needs.build-release.result }}"
          echo "‚úÖ GitHub release: ${{ needs.create-release.result }}"
          echo ""
          echo "üîó Release URL: https://github.com/obadasemary/Rick-Morty/releases/tag/${{ env.VERSION }}"
          echo "::endgroup::"
