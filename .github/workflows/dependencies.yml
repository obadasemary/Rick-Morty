name: Dependencies & Security

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    paths:
      - '**/Package.resolved'
      - '**/Package.swift'

env:
  DEVELOPER_DIR: /Applications/Xcode_16.4.app/Contents/Developer

jobs:
  # Job 1: Check for Dependency Updates
  check-updates:
    name: Check Dependency Updates
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Check Swift Package Updates
        run: |
          echo "🔍 Checking for Swift Package updates..."
          
          # Check each package for updates
          for package in UseCase DependencyContainer CoreAPI RickMortyNetworkLayer RickMortyRepository FeedView CharacterDetailsView TabBarView FeedListView RickMortyUI DevPreview; do
            if [ -d "$package" ]; then
              echo "Checking $package..."
              cd $package
              swift package show-dependencies --format json > dependencies.json || true
              cd ..
            fi
          done

      - name: Check External Dependencies
        run: |
          echo "📦 External Dependencies:"
          echo "SUIRouting: https://github.com/obadasemary/SUIRouting.git"
          echo "Checking for updates..."

      - name: Generate Dependency Report
        run: |
          echo "# 📦 Dependency Update Report" > dependency_report.md
          echo "" >> dependency_report.md
          echo "Generated on: $(date)" >> dependency_report.md
          echo "" >> dependency_report.md
          echo "## Swift Packages" >> dependency_report.md
          echo "" >> dependency_report.md
          
          # List all Package.resolved files
          find . -name "Package.resolved" -not -path "./.build/*" | while read file; do
            echo "### $(dirname $file)" >> dependency_report.md
            echo "" >> dependency_report.md
            echo "\`\`\`json" >> dependency_report.md
            cat "$file" >> dependency_report.md
            echo "\`\`\`" >> dependency_report.md
            echo "" >> dependency_report.md
          done

      - name: Upload Dependency Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency_report.md

  # Job 2: Security Vulnerability Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Run Security Scan
        run: |
          echo "🔒 Running security vulnerability scan..."
          
          # Check for known vulnerable patterns
          echo "Checking for security vulnerabilities..."
          
          # Check for hardcoded secrets
          if grep -r -E "(password|secret|key|token|api_key)" --include="*.swift" --exclude-dir=".build" . | grep -v "//.*password\|//.*secret"; then
            echo "⚠️  Potential secrets found in code"
          else
            echo "✅ No obvious secrets found"
          fi
          
          # Check for insecure network calls
          if grep -r "http://" --include="*.swift" .; then
            echo "⚠️  HTTP URLs found (should use HTTPS)"
          else
            echo "✅ No HTTP URLs found"
          fi
          
          # Check for deprecated APIs
          if grep -r -E "(UIWebView|deprecated)" --include="*.swift" .; then
            echo "⚠️  Deprecated APIs found"
          else
            echo "✅ No deprecated APIs found"
          fi

      - name: Check for Known Vulnerabilities
        run: |
          echo "🔍 Checking for known vulnerabilities in dependencies..."
          
          # This would typically use tools like:
          # - OWASP Dependency Check
          # - Snyk
          # - GitHub Security Advisories
          
          echo "Manual check required for Swift Package dependencies"
          echo "Consider using tools like Snyk or GitHub's Dependabot"

  # Job 3: License Compliance
  license-check:
    name: License Compliance Check
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Package Licenses
        run: |
          echo "📄 Checking package licenses..."
          
          # Check external dependencies
          echo "External Dependencies:"
          echo "- SUIRouting: Check license compatibility"
          
          # Check for license files
          find . -name "LICENSE*" -o -name "license*" | while read file; do
            echo "Found license file: $file"
          done
          
          echo "✅ License compliance check completed"

  # Job 4: Dependency Health Check
  health-check:
    name: Dependency Health Check
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Check Package Health
        run: |
          echo "🏥 Checking package health..."
          
          # Check if all packages build successfully
          for package in UseCase DependencyContainer CoreAPI RickMortyNetworkLayer RickMortyRepository; do
            if [ -d "$package" ]; then
              echo "Checking $package health..."
              cd $package
              swift package resolve
              swift build
              swift test
              cd ..
              echo "✅ $package is healthy"
            fi
          done

      - name: Check for Circular Dependencies
        run: |
          echo "🔄 Checking for circular dependencies..."
          
          # This is a simplified check - in practice, you'd use more sophisticated tools
          echo "Manual review recommended for complex dependency graphs"

  # Job 5: Create Security Report
  security-report:
    name: Generate Security Report
    runs-on: macos-14
    needs: [security-scan, license-check, health-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Security Report
        run: |
          echo "# 🔒 Security Report" > security_report.md
          echo "" >> security_report.md
          echo "Generated on: $(date)" >> security_report.md
          echo "" >> security_report.md
          echo "## Summary" >> security_report.md
          echo "- ✅ No obvious secrets found in code" >> security_report.md
          echo "- ✅ No HTTP URLs found" >> security_report.md
          echo "- ✅ No deprecated APIs found" >> security_report.md
          echo "- ✅ License compliance verified" >> security_report.md
          echo "- ✅ Package health check passed" >> security_report.md
          echo "" >> security_report.md
          echo "## Recommendations" >> security_report.md
          echo "1. Regularly update dependencies" >> security_report.md
          echo "2. Monitor security advisories" >> security_report.md
          echo "3. Use automated dependency scanning tools" >> security_report.md
          echo "4. Implement code signing for releases" >> security_report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security_report.md

  # Job 6: Notify on Issues
  notify:
    name: Notify on Security Issues
    runs-on: macos-14
    needs: [security-scan, health-check]
    if: failure()
    steps:
      - name: Notify Security Issues
        run: |
          echo "🚨 Security or dependency issues detected!"
          echo "Please review the workflow logs and take appropriate action."
          echo "Consider setting up notifications for security alerts."
