name: iOS CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  xcode-build-test:
    runs-on: macos-latest
    env:
      NSUnbufferedIO: "YES"

    steps:
      - uses: actions/checkout@v4

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj/project.pbxproj', '**/*.xcworkspace/contents.xcworkspacedata', '**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-xcode-

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Build & Test (iOS Simulator)
        run: |
          set -euo pipefail
          xcodebuild \
            -workspace "RickMorty.xcworkspace" \
            -scheme "RickMorty" \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
            -skipMacroValidation \
            clean build test

  spm-subpackages-test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      # Portable discovery of all subfolders that contain Package.swift
      - name: Discover Swift packages
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          # Generate pkgs.json with a portable Python script (no GNU find / mapfile)
          python3 - <<'PY' > pkgs.json
          import os, json
          roots = set()
          for root, dirs, files in os.walk('.', topdown=True):
              # prune hidden/noisy dirs
              dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ('DerivedData', '.git')]
              if 'Package.swift' in files:
                  roots.add(root)
          print(json.dumps(sorted(roots)))
          PY
          echo "dirs=$(cat pkgs.json)" >> "$GITHUB_OUTPUT"

      - name: Run tests for each package
        if: ${{ steps.discover.outputs.dirs != '[]' }}
        shell: bash
        run: |
          set -euo pipefail
          dirs='${{ steps.discover.outputs.dirs }}'
          echo "Testing packages: $dirs"
          for dir in $(jq -r '.[]' <<<"$dirs"); do
            echo "::group::swift test in $dir"
            (cd "$dir" && swift test -v)
            echo "::endgroup::"
          done
