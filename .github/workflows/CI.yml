# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: iOS CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  xcode-build-test:
    runs-on: macos-latest
    env:
      NSUnbufferedIO: "YES"

    steps:
      - uses: actions/checkout@v4

      # Optional: speed up builds
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj/project.pbxproj', '**/*.xcworkspace/contents.xcworkspacedata', '**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-xcode-

      - name: Show Xcode version
        run: xcodebuild -version

      # Build & test the iOS app (workspace) â€” use -project if you don't use CocoaPods/SPM workspace
      - name: Build & Test (iOS Simulator)
        run: |
          set -euo pipefail
          xcodebuild \
            -workspace "RickMorty.xcworkspace" \
            -scheme "RickMorty" \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            -skipMacroValidation \
            clean build test

  spm-subpackages-test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Discover Swift packages
        id: discover
        run: |
          set -euo pipefail
          # find all Package.swift files except those in DerivedData or hidden dirs
          mapfile -t PKG_DIRS < <(find . -name Package.swift -not -path "*/.*/*" -not -path "*/DerivedData/*" -printf "%h\n" | sort -u)
          printf "Found packages:\n%s\n" "${PKG_DIRS[@]:-<none>}"
          # Save as an output (JSON array)
          printf '%s' "$(jq -cn '$ARGS.positional' --args "${PKG_DIRS[@]}")" > pkgs.json
          echo "dirs=$(cat pkgs.json)" >> "$GITHUB_OUTPUT"

      - name: Run tests for each package
        if: ${{ steps.discover.outputs.dirs != '[]' }}
        run: |
          set -euo pipefail
          dirs='${{ steps.discover.outputs.dirs }}'
          echo "Testing packages: $dirs"
          for dir in $(jq -r '.[]' <<<"$dirs"); do
            echo "::group::swift test in $dir"
            (cd "$dir" && swift test -v)
            echo "::endgroup::"
          done
